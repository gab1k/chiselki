#ifndef FFT_HPP_
#define FFT_HPP_

#include <vector>
#include <cmath>

namespace adaai {
    template<typename F>
    constexpr F exp_fft(F x) {
        int N = 20;
        // xi = (pi * i) / (N + 1)
        long double a[] = {
                14.08206746950692,
                -7.6698713293023501,
                2.805802148264568,
                -1.52226814432549,
                0.81557678598418223,
                -0.5760544258916948,
                0.36685777481401869,
                -0.29160598311051591,
                0.20196119225368765,
                -0.17063681908629653,
                0.12357858314847431,
                -0.10781492939350392,
                0.079784030141234159,
                -0.070441489123237594,
                0.052233883312173129,
                -0.045687883161572945,
                0.033066933239088094,
                -0.027612892147291742,
                0.018371708403588228,
                -0.013044239249297044,
                0.0058988025353824121,

        };
//        F xi = ((F) (3.14 * i)) / (N + 1);
        F res = a[0] / 2;
//        int i = 7;
//        F xi = (i * Pi<F>) / (N + 1);
        for (int k = 1; k <= N; k++) {
            res += a[k] * cos(k * x);
        }
        std::cout << exp((x)) << "\n";
        return res;
    }
}

#endif // FFT_HPP_

